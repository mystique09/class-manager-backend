// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user_follow.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getAllFollowers = `-- name: GetAllFollowers :many
SELECT id, follower, following, created_at, updated_at
FROM user_follows
WHERE following = $1
ORDER BY created_at
LIMIT 10
OFFSET $2
`

type GetAllFollowersParams struct {
	Following uuid.UUID `json:"following"`
	Offset    int32     `json:"offset"`
}

func (q *Queries) GetAllFollowers(ctx context.Context, arg GetAllFollowersParams) ([]UserFollow, error) {
	rows, err := q.query(ctx, q.getAllFollowersStmt, getAllFollowers, arg.Following, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserFollow
	for rows.Next() {
		var i UserFollow
		if err := rows.Scan(
			&i.ID,
			&i.Follower,
			&i.Following,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFollowing = `-- name: GetAllFollowing :many
SELECT id, follower, following, created_at, updated_at
FROM user_follows
WHERE follower = $1
ORDER BY created_at
LIMIT 10
OFFSET $2
`

type GetAllFollowingParams struct {
	Follower uuid.UUID `json:"follower"`
	Offset   int32     `json:"offset"`
}

func (q *Queries) GetAllFollowing(ctx context.Context, arg GetAllFollowingParams) ([]UserFollow, error) {
	rows, err := q.query(ctx, q.getAllFollowingStmt, getAllFollowing, arg.Follower, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserFollow
	for rows.Next() {
		var i UserFollow
		if err := rows.Scan(
			&i.ID,
			&i.Follower,
			&i.Following,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowUser = `-- name: UnfollowUser :one
DELETE FROM user_follows
WHERE id = $1
RETURNING id, follower, following, created_at, updated_at
`

func (q *Queries) UnfollowUser(ctx context.Context, id uuid.UUID) (UserFollow, error) {
	row := q.queryRow(ctx, q.unfollowUserStmt, unfollowUser, id)
	var i UserFollow
	err := row.Scan(
		&i.ID,
		&i.Follower,
		&i.Following,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
