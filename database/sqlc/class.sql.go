// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: class.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createClass = `-- name: CreateClass :one
INSERT INTO "class" (id, admin_id, name, description, section, room, subject, invite_code, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, admin_id, name, description, section, room, subject, invite_code, created_at, updated_at
`

type CreateClassParams struct {
	ID          uuid.UUID      `json:"id"`
	AdminID     uuid.NullUUID  `json:"admin_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Section     sql.NullString `json:"section"`
	Room        sql.NullString `json:"room"`
	Subject     sql.NullString `json:"subject"`
	InviteCode  uuid.NullUUID  `json:"invite_code"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

//description: Create a class
//parameters: id(uuid), admin_id, name, description, section, room, subject, invite_code, created_at, updated_at
//returns: class
func (q *Queries) CreateClass(ctx context.Context, arg CreateClassParams) (Class, error) {
	row := q.queryRow(ctx, q.createClassStmt, createClass,
		arg.ID,
		arg.AdminID,
		arg.Name,
		arg.Description,
		arg.Section,
		arg.Room,
		arg.Subject,
		arg.InviteCode,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.AdminID,
		&i.Name,
		&i.Description,
		&i.Section,
		&i.Room,
		&i.Subject,
		&i.InviteCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteClass = `-- name: DeleteClass :exec
DELETE FROM "class"
WHERE id = $1
`

//description: Delete a class
//parameters: id
func (q *Queries) DeleteClass(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteClassStmt, deleteClass, id)
	return err
}

const getClass = `-- name: GetClass :one
SELECT id, admin_id, name, description, section, room, subject, invite_code, created_at, updated_at
FROM "class"
WHERE id = $1
`

//description: Get a class by id
//parameters: id
//returns: class
func (q *Queries) GetClass(ctx context.Context, id uuid.UUID) (Class, error) {
	row := q.queryRow(ctx, q.getClassStmt, getClass, id)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.AdminID,
		&i.Name,
		&i.Description,
		&i.Section,
		&i.Room,
		&i.Subject,
		&i.InviteCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listClass = `-- name: ListClass :many
SELECT id, admin_id, name, description, section, room, subject, invite_code, created_at, updated_at
FROM "class"
`

//description: List all classes
//parameters: none
//returns: classes
func (q *Queries) ListClass(ctx context.Context) ([]Class, error) {
	rows, err := q.query(ctx, q.listClassStmt, listClass)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Class
	for rows.Next() {
		var i Class
		if err := rows.Scan(
			&i.ID,
			&i.AdminID,
			&i.Name,
			&i.Description,
			&i.Section,
			&i.Room,
			&i.Subject,
			&i.InviteCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClass = `-- name: UpdateClass :exec
UPDATE "class"
SET name = $1, description = $2, section = $3, room = $4, subject = $5, invite_code = $6, updated_at = $7
WHERE id = $8
`

type UpdateClassParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Section     sql.NullString `json:"section"`
	Room        sql.NullString `json:"room"`
	Subject     sql.NullString `json:"subject"`
	InviteCode  uuid.NullUUID  `json:"invite_code"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	ID          uuid.UUID      `json:"id"`
}

//description: Update a class
//parameters: name, description, section, room, subject, invite_code, updated_at
func (q *Queries) UpdateClass(ctx context.Context, arg UpdateClassParams) error {
	_, err := q.exec(ctx, q.updateClassStmt, updateClass,
		arg.Name,
		arg.Description,
		arg.Section,
		arg.Room,
		arg.Subject,
		arg.InviteCode,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
