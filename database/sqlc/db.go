// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createClassStmt, err = db.PrepareContext(ctx, createClass); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClass: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteClassStmt, err = db.PrepareContext(ctx, deleteClass); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClass: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getClassStmt, err = db.PrepareContext(ctx, getClass); err != nil {
		return nil, fmt.Errorf("error preparing query GetClass: %w", err)
	}
	if q.getClassWorkStmt, err = db.PrepareContext(ctx, getClassWork); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassWork: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.getUserWithPostsStmt, err = db.PrepareContext(ctx, getUserWithPosts); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserWithPosts: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.listClassStmt, err = db.PrepareContext(ctx, listClass); err != nil {
		return nil, fmt.Errorf("error preparing query ListClass: %w", err)
	}
	if q.listClassWorkStmt, err = db.PrepareContext(ctx, listClassWork); err != nil {
		return nil, fmt.Errorf("error preparing query ListClassWork: %w", err)
	}
	if q.updateClassStmt, err = db.PrepareContext(ctx, updateClass); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClass: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createClassStmt != nil {
		if cerr := q.createClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClassStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteClassStmt != nil {
		if cerr := q.deleteClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClassStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getClassStmt != nil {
		if cerr := q.getClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassStmt: %w", cerr)
		}
	}
	if q.getClassWorkStmt != nil {
		if cerr := q.getClassWorkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassWorkStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getUserWithPostsStmt != nil {
		if cerr := q.getUserWithPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserWithPostsStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.listClassStmt != nil {
		if cerr := q.listClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClassStmt: %w", cerr)
		}
	}
	if q.listClassWorkStmt != nil {
		if cerr := q.listClassWorkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClassWorkStmt: %w", cerr)
		}
	}
	if q.updateClassStmt != nil {
		if cerr := q.updateClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClassStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                     DBTX
	tx                     *sql.Tx
	createClassStmt        *sql.Stmt
	createUserStmt         *sql.Stmt
	deleteClassStmt        *sql.Stmt
	deleteUserStmt         *sql.Stmt
	getClassStmt           *sql.Stmt
	getClassWorkStmt       *sql.Stmt
	getUserStmt            *sql.Stmt
	getUserByUsernameStmt  *sql.Stmt
	getUserWithPostsStmt   *sql.Stmt
	getUsersStmt           *sql.Stmt
	listClassStmt          *sql.Stmt
	listClassWorkStmt      *sql.Stmt
	updateClassStmt        *sql.Stmt
	updateUserStmt         *sql.Stmt
	updateUserPasswordStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                     tx,
		tx:                     tx,
		createClassStmt:        q.createClassStmt,
		createUserStmt:         q.createUserStmt,
		deleteClassStmt:        q.deleteClassStmt,
		deleteUserStmt:         q.deleteUserStmt,
		getClassStmt:           q.getClassStmt,
		getClassWorkStmt:       q.getClassWorkStmt,
		getUserStmt:            q.getUserStmt,
		getUserByUsernameStmt:  q.getUserByUsernameStmt,
		getUserWithPostsStmt:   q.getUserWithPostsStmt,
		getUsersStmt:           q.getUsersStmt,
		listClassStmt:          q.listClassStmt,
		listClassWorkStmt:      q.listClassWorkStmt,
		updateClassStmt:        q.updateClassStmt,
		updateUserStmt:         q.updateUserStmt,
		updateUserPasswordStmt: q.updateUserPasswordStmt,
	}
}
