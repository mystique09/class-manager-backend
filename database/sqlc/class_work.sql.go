// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: class_work.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getClassWork = `-- name: GetClassWork :one
SELECT id, name, user_id, class_id, mark, created_at, updated_at 
FROM class_work 
WHERE id = $1
`

//description: Get a class work by id
//parameters: id
//returns: class_work
func (q *Queries) GetClassWork(ctx context.Context, id uuid.UUID) (ClassWork, error) {
	row := q.queryRow(ctx, q.getClassWorkStmt, getClassWork, id)
	var i ClassWork
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.ClassID,
		&i.Mark,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listClassWork = `-- name: ListClassWork :many
SELECT id, name, user_id, class_id, mark, created_at, updated_at
FROM class_work
`

//description: List all class works
//parameters: none
//returns: class_work
func (q *Queries) ListClassWork(ctx context.Context) ([]ClassWork, error) {
	rows, err := q.query(ctx, q.listClassWorkStmt, listClassWork)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClassWork
	for rows.Next() {
		var i ClassWork
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.ClassID,
			&i.Mark,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
