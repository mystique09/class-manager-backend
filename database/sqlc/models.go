// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package database

import (
	"database/sql"
	"fmt"

	"github.com/google/uuid"
)

type Role string

const (
	RoleSTUDENT Role = "STUDENT"
	RoleTEACHER Role = "TEACHER"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type Visibility string

const (
	VisibilityPUBLIC  Visibility = "PUBLIC"
	VisibilityPRIVATE Visibility = "PRIVATE"
)

func (e *Visibility) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Visibility(s)
	case string:
		*e = Visibility(s)
	default:
		return fmt.Errorf("unsupported scan type for Visibility: %T", src)
	}
	return nil
}

type Class struct {
	ID          uuid.UUID    `json:"id"`
	AdminID     uuid.UUID    `json:"admin_id"`
	Name        string       `json:"name"`
	Description string       `json:"description"`
	Section     string       `json:"section"`
	Room        string       `json:"room"`
	Subject     string       `json:"subject"`
	InviteCode  uuid.UUID    `json:"invite_code"`
	Visibility  Visibility   `json:"visibility"`
	CreatedAt   sql.NullTime `json:"created_at"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
}

type ClassMember struct {
	ID        uuid.UUID    `json:"id"`
	ClassID   uuid.UUID    `json:"class_id"`
	UserID    uuid.UUID    `json:"user_id"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

type ClassWork struct {
	ID        uuid.UUID     `json:"id"`
	Name      string        `json:"name"`
	UserID    uuid.UUID     `json:"user_id"`
	ClassID   uuid.UUID     `json:"class_id"`
	Mark      sql.NullInt32 `json:"mark"`
	CreatedAt sql.NullTime  `json:"created_at"`
	UpdatedAt sql.NullTime  `json:"updated_at"`
}

type Comment struct {
	ID        uuid.UUID    `json:"id"`
	Content   string       `json:"content"`
	AuthorID  uuid.UUID    `json:"author_id"`
	PostID    uuid.UUID    `json:"post_id"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

type Post struct {
	ID        uuid.UUID    `json:"id"`
	Content   string       `json:"content"`
	AuthorID  uuid.UUID    `json:"author_id"`
	ClassID   uuid.UUID    `json:"class_id"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

type PostLike struct {
	ID        uuid.UUID    `json:"id"`
	PostID    uuid.UUID    `json:"post_id"`
	UserID    uuid.UUID    `json:"user_id"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

type User struct {
	ID         uuid.UUID    `json:"id"`
	Username   string       `json:"username"`
	Password   string       `json:"-"`
	Email      string       `json:"email"`
	UserRole   Role         `json:"user_role"`
	Visibility Visibility   `json:"visibility"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
}

type UserFollow struct {
	ID        uuid.UUID    `json:"id"`
	Follower  uuid.UUID    `json:"follower"`
	Following uuid.UUID    `json:"following"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}
